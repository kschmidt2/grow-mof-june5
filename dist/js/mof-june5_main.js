Highcharts.setOptions({lang:{thousandsSep:","}});let chartIdSPX2june5=document.getElementById("chart-container-spx2-june5");function drawHighcharts(){Highcharts.chart(chartIdSPX2june5,{chart:{type:"line",styledMode:!0,spacingBottom:25,spacingRight:100,spacingLeft:0,spacingTop:20},title:{text:null},data:{googleSpreadsheetKey:"16n5J3bEvxFWlQd8m2YqxKCZwvil-1j0uVVppsYfn_tM"},plotOptions:{series:{lineWidth:1,marker:{enabled:!1,symbol:"circle",fillColor:"#ffffff",states:{hover:{fillColor:"#ffffff"}}}}},legend:{enabled:!1},xAxis:{labels:{style:{whiteSpace:"nowrap"}},tickLength:10,dateTimeLabelFormats:{week:"%b %e"},tickInterval:72576e5},yAxis:{title:!1,labels:{useHTML:!0,overflow:"allow",format:"{value:,.0f}"},tickAmount:5},credits:{enabled:!1},tooltip:{shadow:!1,padding:10},responsive:{rules:[{condition:{maxWidth:500},chartOptions:{chart:{spacingRight:10},legend:{align:"left",x:-18},tooltip:{enabled:!1}}}]}})}setTimeout(function(){if(""===chartIdSPX2june5.innerHTML){let t=document.getElementsByClassName("chart-area-spx2-june5");for(var e=0;e<t.length;e++)t[e].style.display="none";document.getElementById("chart-fallback").innerHTML+='<img src="https://fm-static.cnbc.com/awsmedia/chart/2019/10/08/chart-error_wide.1570569331252.png" style="width: 100%;max-width:660px">'}},500),"complete"===document.readyState||"interactive"===document.readyState?drawHighcharts():document.addEventListener("DOMContentLoaded",drawHighcharts);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsiSGlnaGNoYXJ0cyIsInNldE9wdGlvbnMiLCJsYW5nIiwidGhvdXNhbmRzU2VwIiwiY2hhcnRJZFNQWDJqdW5lNSIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJkcmF3SGlnaGNoYXJ0cyIsImNoYXJ0IiwidHlwZSIsInN0eWxlZE1vZGUiLCJzcGFjaW5nQm90dG9tIiwic3BhY2luZ1JpZ2h0Iiwic3BhY2luZ0xlZnQiLCJzcGFjaW5nVG9wIiwidGl0bGUiLCJ0ZXh0IiwiZGF0YSIsImdvb2dsZVNwcmVhZHNoZWV0S2V5IiwicGxvdE9wdGlvbnMiLCJzZXJpZXMiLCJsaW5lV2lkdGgiLCJtYXJrZXIiLCJlbmFibGVkIiwic3ltYm9sIiwiZmlsbENvbG9yIiwic3RhdGVzIiwiaG92ZXIiLCJsZWdlbmQiLCJ4QXhpcyIsImxhYmVscyIsInN0eWxlIiwid2hpdGVTcGFjZSIsInRpY2tMZW5ndGgiLCJkYXRlVGltZUxhYmVsRm9ybWF0cyIsIndlZWsiLCJ0aWNrSW50ZXJ2YWwiLCJ5QXhpcyIsInVzZUhUTUwiLCJvdmVyZmxvdyIsImZvcm1hdCIsInRpY2tBbW91bnQiLCJjcmVkaXRzIiwidG9vbHRpcCIsInNoYWRvdyIsInBhZGRpbmciLCJyZXNwb25zaXZlIiwicnVsZXMiLCJjb25kaXRpb24iLCJtYXhXaWR0aCIsImNoYXJ0T3B0aW9ucyIsImFsaWduIiwieCIsInNldFRpbWVvdXQiLCJpbm5lckhUTUwiLCJjaGFydEFyZWEiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwiaSIsImxlbmd0aCIsImRpc3BsYXkiLCJyZWFkeVN0YXRlIiwiYWRkRXZlbnRMaXN0ZW5lciJdLCJtYXBwaW5ncyI6IkFBUUFBLFdBQUFDLFdBQUEsQ0FDQUMsS0FBQSxDQUNBQyxhQUFBLE9BSUEsSUFBQUMsaUJBQUFDLFNBQUFDLGVBQUEsOEJBaUJBLFNBQUFDLGlCQUNBUCxXQUFBUSxNQUFBSixpQkFBQSxDQUNBSSxNQUFBLENBQ0FDLEtBQUEsT0FDQUMsWUFBQSxFQUNBQyxjQUFBLEdBQ0FDLGFBQUEsSUFDQUMsWUFBQSxFQUNBQyxXQUFBLElBRUFDLE1BQUEsQ0FDQUMsS0FBQSxNQUVBQyxLQUFBLENBQ0FDLHFCQUFBLGdEQVNBQyxZQUFBLENBQ0FDLE9BQUEsQ0FDQUMsVUFBQSxFQUVBQyxPQUFBLENBQ0FDLFNBQUEsRUFDQUMsT0FBQSxTQUNBQyxVQUFBLFVBQ0FDLE9BQUEsQ0FDQUMsTUFBQSxDQUNBRixVQUFBLGVBTUFHLE9BQUEsQ0FDQUwsU0FBQSxHQUVBTSxNQUFBLENBQ0FDLE9BQUEsQ0FDQUMsTUFBQSxDQUNBQyxXQUFBLFdBR0FDLFdBQUEsR0FFQUMscUJBQUEsQ0FDQUMsS0FBQSxTQUVBQyxhQUFBLFNBRUFDLE1BQUEsQ0FDQXRCLE9BQUEsRUFDQWUsT0FBQSxDQUNBUSxTQUFBLEVBQ0FDLFNBQUEsUUFDQUMsT0FBQSxnQkFFQUMsV0FBQSxHQU1BQyxRQUFBLENBQ0FuQixTQUFBLEdBRUFvQixRQUFBLENBQ0FDLFFBQUEsRUFDQUMsUUFBQSxJQUVBQyxXQUFBLENBQ0FDLE1BQUEsQ0FBQSxDQUNBQyxVQUFBLENBQ0FDLFNBQUEsS0FFQUMsYUFBQSxDQUNBMUMsTUFBQSxDQUNBSSxhQUFBLElBRUFnQixPQUFBLENBQ0F1QixNQUFBLE9BQ0FDLEdBQUEsSUFFQVQsUUFBQSxDQUNBcEIsU0FBQSxTQXZHQThCLFdBQUEsV0FDQSxHQUFBLEtBQUFqRCxpQkFBQWtELFVBQUEsQ0FFQSxJQUFBQyxFQUFBbEQsU0FBQW1ELHVCQUFBLHlCQUNBLElBQUEsSUFBQUMsRUFBQSxFQUFBQSxFQUFBRixFQUFBRyxPQUFBRCxJQUNBRixFQUFBRSxHQUFBMUIsTUFBQTRCLFFBQUEsT0FHQXRELFNBQUFDLGVBQUEsa0JBQUFnRCxXQUFBLDRJQUlBLEtBbUdBLGFBQUFqRCxTQUFBdUQsWUFBQSxnQkFBQXZELFNBQUF1RCxXQUNBckQsaUJBRUFGLFNBQUF3RCxpQkFBQSxtQkFBQXREIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBhZGRzIHNvY2lhbCBjbGFzcyB0byBnZXQgc29jaWFsIGNoYXJ0XG4vLyBsZXQgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJjaGFydC1hcmVhLXNweDItanVuZTVcIik7XG4vLyBmb3IodmFyIGkgPSAwOyBpIDwgZWxlbWVudC5sZW5ndGg7IGkrKylcbi8vIHtcbi8vICAgICBlbGVtZW50W2ldLmNsYXNzTmFtZSArPSBcIiBzb2NpYWxcIjtcbi8vIH1cblxuXG5IaWdoY2hhcnRzLnNldE9wdGlvbnMoe1xuICAgIGxhbmc6IHtcbiAgICAgIHRob3VzYW5kc1NlcDogJywnXG4gICAgfVxufSk7XG5cbmxldCBjaGFydElkU1BYMmp1bmU1ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjaGFydC1jb250YWluZXItc3B4Mi1qdW5lNVwiKTtcblxuLy8gY2hlY2tzIGZvciB0aGUgY2hhcnQgSUQgYW5kIGRpc3BsYXlzIGEgYmFja3VwIGltYWdlIGlmIHRoZSBicm93c2VyIGNhbid0IGZpbmQgaXRcbnNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgaWYoY2hhcnRJZFNQWDJqdW5lNS5pbm5lckhUTUwgPT09IFwiXCIpIHtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ25vSWQnKTtcbiAgICAgICAgbGV0IGNoYXJ0QXJlYSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJjaGFydC1hcmVhLXNweDItanVuZTVcIik7XG4gICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBjaGFydEFyZWEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNoYXJ0QXJlYVtpXS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgIH0gXG4gICAgICAgIC8vIGluc2VydCBjaGFydCBzY3JlZW5zaG90IGhlcmVcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjaGFydC1mYWxsYmFja1wiKS5pbm5lckhUTUwgKz0gJzxpbWcgc3JjPVwiaHR0cHM6Ly9mbS1zdGF0aWMuY25iYy5jb20vYXdzbWVkaWEvY2hhcnQvMjAxOS8xMC8wOC9jaGFydC1lcnJvcl93aWRlLjE1NzA1NjkzMzEyNTIucG5nXCIgc3R5bGU9XCJ3aWR0aDogMTAwJTttYXgtd2lkdGg6NjYwcHhcIj4nO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCd5ZXNJZCcpXG4gICAgfVxufSw1MDApO1xuXG5mdW5jdGlvbiBkcmF3SGlnaGNoYXJ0cygpIHtcbiAgICBIaWdoY2hhcnRzLmNoYXJ0KGNoYXJ0SWRTUFgyanVuZTUsIHtcbiAgICAgICAgY2hhcnQ6IHtcbiAgICAgICAgICAgIHR5cGU6ICdsaW5lJyxcbiAgICAgICAgICAgIHN0eWxlZE1vZGU6IHRydWUsXG4gICAgICAgICAgICBzcGFjaW5nQm90dG9tOiAyNSxcbiAgICAgICAgICAgIHNwYWNpbmdSaWdodDogMTAwLFxuICAgICAgICAgICAgc3BhY2luZ0xlZnQ6IDAsXG4gICAgICAgICAgICBzcGFjaW5nVG9wOiAyMFxuICAgICAgICB9LCBcbiAgICAgICAgdGl0bGU6IHtcbiAgICAgICAgICAgIHRleHQ6IG51bGxcbiAgICAgICAgfSxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgZ29vZ2xlU3ByZWFkc2hlZXRLZXk6ICcxNm41SjNiRXZ4RldsUWQ4bTJZcXhLQ1p3dmlsLTFqMHVWVnBwc1lmbl90TScsXG4gICAgICAgIH0sXG4gICAgICAgIC8vIGZvciBiYXIgY2hhcnRzIG9ubHlcbiAgICAgICAgLy8gcGxvdE9wdGlvbnM6IHtcbiAgICAgICAgLy8gICAgIHNlcmllczoge1xuICAgICAgICAvLyAgICAgICAgIGdyb3VwUGFkZGluZzogMC4xXG4gICAgICAgIC8vICAgICB9IFxuICAgICAgICAvLyB9LFxuICAgICAgICAvLyBmb3IgbGluZSBjaGFydHMgb25seVxuICAgICAgICBwbG90T3B0aW9uczoge1xuICAgICAgICAgICAgc2VyaWVzOiB7XG4gICAgICAgICAgICAgICAgbGluZVdpZHRoOiAxLFxuICAgICAgICAgICAgICAgIC8vIGNsaXA6IGZhbHNlLFxuICAgICAgICAgICAgICAgIG1hcmtlcjoge1xuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgc3ltYm9sOiAnY2lyY2xlJyxcbiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnI2ZmZmZmZicsXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgaG92ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjZmZmZmZmJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBsZWdlbmQ6IHtcbiAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIHhBeGlzOiB7XG4gICAgICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICB3aGl0ZVNwYWNlOiAnbm93cmFwJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0aWNrTGVuZ3RoOiAxMCxcbiAgICAgICAgICAgIC8vIGVkaXRzIHhBeGlzIHRpY2tzXG4gICAgICAgICAgICBkYXRlVGltZUxhYmVsRm9ybWF0czoge1xuICAgICAgICAgICAgICAgIHdlZWs6ICclYiAlZScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGlja0ludGVydmFsOiAyNCAqIDM2MDAgKiAxMDAwICogNyAqIDEyXG4gICAgICAgIH0sXG4gICAgICAgIHlBeGlzOiB7XG4gICAgICAgICAgICB0aXRsZTogZmFsc2UsXG4gICAgICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICAgICAgICB1c2VIVE1MOiB0cnVlLFxuICAgICAgICAgICAgICAgIG92ZXJmbG93OiAnYWxsb3cnLFxuICAgICAgICAgICAgICAgIGZvcm1hdDogJ3t2YWx1ZTosLjBmfSdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0aWNrQW1vdW50OiA1XG4gICAgICAgICAgICAvLyBhZGRzIGNvbW1hcyB0byB0aG91c2FuZHNcbiAgICAgICAgICAgIC8vIGZvcm1hdHRlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gICAgIHJldHVybiBIaWdoY2hhcnRzLm51bWJlckZvcm1hdCh0aGlzLnZhbHVlLDAsJy4nLCcsJyk7XG4gICAgICAgICAgICAvLyB9LFxuICAgICAgICB9LFxuICAgICAgICBjcmVkaXRzOiB7XG4gICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICB0b29sdGlwOiB7XG4gICAgICAgICAgICBzaGFkb3c6IGZhbHNlLFxuICAgICAgICAgICAgcGFkZGluZzogMTBcbiAgICAgICAgfSxcbiAgICAgICAgcmVzcG9uc2l2ZToge1xuICAgICAgICAgICAgcnVsZXM6IFt7XG4gICAgICAgICAgICBjb25kaXRpb246IHtcbiAgICAgICAgICAgICAgICBtYXhXaWR0aDogNTAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2hhcnRPcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgY2hhcnQ6IHtcbiAgICAgICAgICAgICAgICBzcGFjaW5nUmlnaHQ6IDEwXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBsZWdlbmQ6IHtcbiAgICAgICAgICAgICAgICAgICAgYWxpZ246ICdsZWZ0JyxcbiAgICAgICAgICAgICAgICAgICAgeDogLTE4XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB0b29sdGlwOiB7XG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgfV1cbiAgICAgICAgfVxuICAgIH0pXG59XG5cbmlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09PSAnY29tcGxldGUnIHx8IGRvY3VtZW50LnJlYWR5U3RhdGUgPT09ICdpbnRlcmFjdGl2ZScpIHtcbiAgICBkcmF3SGlnaGNoYXJ0cygpO1xufSBlbHNlIHtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCBkcmF3SGlnaGNoYXJ0cyk7XG59Il19
